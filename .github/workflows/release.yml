name: Publish Releases

on:
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.11"

jobs:
  build-and-publish-pypi:
    name: Build and publish release to PyPI
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-tag.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get tag
        id: get-tag
        run: echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"

      - name: Validate version number
        run: |
          if [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
            if ! [[ "${{ steps.get-tag.outputs.tag }}" =~ "b" ]]; then
              echo "Pre-release: Tag is missing beta suffix (${{ steps.get-tag.outputs.tag }})"
              exit 1
            fi
          else
            if [[ "${{ steps.get-tag.outputs.tag }}" =~ "b" ]]; then
              echo "Release: Tag must not have a beta suffix (${{ steps.get-tag.outputs.tag }})"
              exit 1
            fi
          fi

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build tools
        run: pip install build tomli tomli_w

      - name: Set Python project version from tag
        run: |
          python3 -m pip install tomli tomli_w
          python3 -c '
          import tomli, tomli_w
          with open("pyproject.toml", "rb") as f:
              pyproject = tomli.load(f)
          pyproject["project"]["version"] = "${{ steps.get-tag.outputs.tag }}"
          with open("pyproject.toml", "wb") as f:
              tomli_w.dump(pyproject, f)'

      - name: Build python package
        run: python3 -m build

      - name: Publish release to PyPI
        uses: pypa/gh-action-pypi-publish@v1.9.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

  build-and-push-container-image:
    name: Build and push Music Assistant Server container to ghcr.io
    runs-on: ubuntu-latest
    needs: build-and-publish-pypi
    outputs:
      patch: ${{ steps.tags.outputs.patch }}
      minor: ${{ steps.tags.outputs.minor }}
      major: ${{ steps.tags.outputs.major }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Version number for tags
        id: tags
        run: |
          patch=${GITHUB_REF#refs/tags/}
          echo "::set-output name=patch::${patch}"
          echo "::set-output name=minor::${patch%.*}"
          echo "::set-output name=major::${patch%.*.*}"

      - name: Build and Push release
        if: github.event.release.prerelease == 'true'
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t ghcr.io/${{ github.repository_owner }}/server:${{ steps.tags.outputs.major }}.${{ steps.tags.outputs.minor }}.${{ steps.tags.outputs.patch }}b${{ github.run_number }} -t ghcr.io/${{ github.repository_owner }}/server:${{ steps.tags.outputs.major }}.${{ steps.tags.outputs.minor }}b${{ github.run_number }} -t ghcr.io/${{ github.repository_owner }}/server:${{ steps.tags.outputs.major }}b${{ github.run_number }} -t ghcr.io/${{ github.repository_owner }}/server:beta -t ghcr.io/${{ github.repository_owner }}/server:latest --push
