name: Publish releases

on:
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.11"

jobs:
  build-and-publish-pypi:
    name: Builds and publishes releases to PyPI
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.4

      - name: Get tag
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Validate version number
        run: |
          if [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
            if ! [[ "${{ steps.vars.outputs.tag }}" =~ "b" ]]; then
              echo "Pre-release: Tag is missing beta suffix (${{ steps.vars.outputs.tag }})"
              exit 1
            fi
          else
            if [[ "${{ steps.vars.outputs.tag }}" =~ "b" ]]; then
              echo "Release: Tag must not have a beta suffix (${{ steps.vars.outputs.tag }})"
              exit 1
            fi
          fi

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build tools
        run: pip install build tomli tomli-w

      - name: Set Python project version from tag
        run: |
          python3 -c "
          import tomli
          import tomli_w

          with open('pyproject.toml', 'rb') as f:
              pyproject = tomli.load(f)

          pyproject['project']['version'] = '${{ steps.vars.outputs.tag }}'

          with open('pyproject.toml', 'wb') as f:
              tomli_w.dump(pyproject, f)
          "

      - name: Build python package
        run: python3 -m build

      - name: Publish release to PyPI
        uses: pypa/gh-action-pypi-publish@v1.9.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Wait for PyPI
        run: sleep 300

  build-and-push-container-image:
    name: Builds and pushes the Music Assistant Server container to ghcr.io
    runs-on: ubuntu-latest
    permissions:
      packages: write
    needs: build-and-publish-pypi
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.4

      - name: Download Widevine CDM client files from private repository
        shell: bash
        env:
          TOKEN: ${{ secrets.PRIVILEGED_GITHUB_TOKEN }}
        run: |
          mkdir -p widevine_cdm && cd widevine_cdm
          curl -OJ -H "Authorization: token ${TOKEN}" https://raw.githubusercontent.com/music-assistant/appvars/main/widevine_cdm_client/private_key.pem
          curl -OJ -H "Authorization: token ${TOKEN}" https://raw.githubusercontent.com/music-assistant/appvars/main/widevine_cdm_client/client_id.bin

      - name: Log in to the GitHub container registry
        uses: docker/login-action@v3.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0

      - name: Version number for tags
        id: tags
        shell: bash
        run: |
          patch=${GITHUB_REF#refs/*/}
          echo "patch=${patch}" >> $GITHUB_ENV
          echo "minor=${patch%.*}" >> $GITHUB_ENV
          echo "major=${patch%.*.*}" >> $GITHUB_ENV

      - name: Build and Push release
        if: github.event.release.prerelease == 'false'
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --file Dockerfile \
            --tag ghcr.io/${{ github.repository_owner }}/server:${{ steps.tags.outputs.patch }} \
            --tag ghcr.io/${{ github.repository_owner }}/server:${{ steps.tags.outputs.minor }} \
            --tag ghcr.io/${{ github.repository_owner }}/server:${{ steps.tags.outputs.major }} \
            --tag ghcr.io/${{ github.repository_owner }}/server:stable \
            --tag ghcr.io/${{ github.repository_owner }}/server:latest \
            --push \
            --build-arg MASS_VERSION=${{ needs.build-and-publish-pypi.outputs.version }}

      - name: Build and Push pre-release
        if: github.event.release.prerelease == 'true'
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --file Dockerfile \
            --tag ghcr.io/${{ github.repository_owner }}/server:${{ steps.tags.outputs.patch }} \
            --tag ghcr.io/${{ github.repository_owner }}/server:beta \
            --push \
            --build-arg MASS_VERSION=${{ needs.build-and-publish-pypi.outputs.version }}

  addon-version-update:
    name: Updates the Addon repository with the new version
    needs:
      - build-and-publish-pypi
      - build-and-push-container-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.4

      - name: Push new version number to addon config
        uses: xdumaster1/addon-update-action@main
        with:
          github_token: ${{ secrets.PRIVILEGED_GITHUB_TOKEN }}
          new_server_version: ${{ needs.build-and-publish-pypi.outputs.version }}
          pre_release: ${{ github.event.release.prerelease }}
